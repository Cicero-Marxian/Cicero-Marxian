local OrionLib = loadstring(game:HttpGet(('https://raw.githubusercontent.com/thanhdat4461/OrionMoblie/main/source')))()

local Window = OrionLib:MakeWindow({Name = "GX HUB | NOQSEL", HidePremium = false, IntroText = "GX Hub", SaveConfig = true, ConfigFolder = "OrionTest"})

OrionLib:MakeNotification({
	Name = "Hello!",
	Content = "thx for using GX Hub..! ",
	Image = "rbxassetid://7733765398",
	Time = 5
})

local UniversalTab = Window:MakeTab({
	Name = "Universal",
	Icon = "rbxassetid://7733960981",
	PremiumOnly = false
})

local GamesTab = Window:MakeTab({
	Name = "Games",
	Icon = "rbxassetid://7733799901",
	PremiumOnly = false
})

local TrollsTab = Window:MakeTab({
	Name = "Trolls",
	Icon = "rbxassetid://7734059095",
	PremiumOnly = false
})

local OthersTab = Window:MakeTab({
	Name = "Scripts",
	Icon = "rbxassetid://7743871876",
	PremiumOnly = false
})

local GxTab = Window:MakeTab({
	Name = "GX Features",
	Icon = "rbxassetid://7734040369",
	PremiumOnly = false
})

local CreditsTab = Window:MakeTab({
	Name = "About GX",
	Icon = "rbxassetid://7734021680",
	PremiumOnly = false
})

local ChangelogTab = Window:MakeTab({
	Name = "Changelog",
	Icon = "rbxassetid://8997386648",
	PremiumOnly = false
})

--ehh

local Section = UniversalTab:AddSection({
	Name = "Universal's Scripts"
})

local Section = GamesTab:AddSection({
	Name = "Roblox Games "
})

local Section = TrollsTab:AddSection({
	Name = "Trolling "
})

local Section = OthersTab:AddSection({
	Name = "SCRIPTS!"
})

local Section = GxTab:AddSection({
	Name = "GX Scripts"
})

local Section = CreditsTab:AddSection({
	Name = "respect to noqsel"
})

local Section = ChangelogTab:AddSection({
	Name = "Changelogs"
})

--Button

CreditsTab:AddButton({
	Name = "old kavo version  ",
	Callback = function()
loadstring(game:HttpGet(('https://pastefy.app/h7uzfKRe/raw'),true))()
  	end    
})

CreditsTab:AddButton({
	Name = "thx for using gx hub .. :) ",
	Callback = function()
loadstring(game:HttpGet('https://raw.githubusercontent.com/ant-7802/--/main/straightmilk.lua'))()
  	end    
})

CreditsTab:AddButton({
	Name = "support the hub by donating on [zenocicero2] booth in pls donate!",
	Callback = function()
loadstring(game:HttpGet('https://raw.githubusercontent.com/ant-7802/--/main/straightmilk.lua'))()
    end
})

GxTab:AddButton({
	Name = "GX Mobile Opener Button ",
	Callback = function()
-- Instances:
local ScreenGui = Instance.new("ScreenGui")
local Frame = Instance.new("Frame")
local DragFrame = Instance.new("Frame")
local TextButton = Instance.new("TextButton")
local UITextSizeConstraint = Instance.new("UITextSizeConstraint")

-- Properties:
ScreenGui.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")
ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

Frame.Parent = ScreenGui
Frame.BackgroundColor3 = Color3.fromRGB(0, 0, 0) -- Black frame background
Frame.BackgroundTransparency = 0.5
Frame.Position = UDim2.new(0, 10, 0, 10) -- Adjusted position
Frame.Size = UDim2.new(0, 100, 0, 30) -- Adjusted size

DragFrame.Parent = Frame
DragFrame.BackgroundColor3 = Color3.fromRGB(255, 0, 0) -- Red for visibility
DragFrame.Size = UDim2.new(1, 0, 0, 30) -- Visible square above the frame

TextButton.Parent = Frame
TextButton.BackgroundColor3 = Color3.fromRGB(0, 0, 0) -- Black button background
TextButton.BackgroundTransparency = 0
TextButton.Size = UDim2.new(1, 0, 1, 0)
TextButton.Font = Enum.Font.SourceSans
TextButton.Text = "GX"
TextButton.TextColor3 = Color3.fromRGB(255, 255, 255)
TextButton.TextScaled = true
TextButton.TextSize = 15.000
TextButton.TextStrokeColor3 = Color3.fromRGB(255, 255, 255)
TextButton.TextStrokeTransparency = 0.000
TextButton.TextWrapped = true

local closeButton = Instance.new("TextButton")
closeButton.Parent = TextButton
closeButton.BackgroundTransparency = 1
closeButton.Size = UDim2.new(0.3, 0, 0.3, 0)
closeButton.Position = UDim2.new(0.7, 0, 0.1, 0)
closeButton.Font = Enum.Font.SourceSans
closeButton.Text = "X"
closeButton.TextColor3 = Color3.fromRGB(255, 255, 255)
closeButton.TextScaled = true
closeButton.TextSize = 16.000
closeButton.TextStrokeColor3 = Color3.fromRGB(0, 0, 0)
closeButton.TextStrokeTransparency = 0.000
closeButton.TextWrapped = true
closeButton.MouseButton1Click:Connect(function()
    ScreenGui:Destroy()
end)

TextButton.MouseButton1Click:Connect(function()
    game:GetService("VirtualInputManager"):SendKeyEvent(true, Enum.KeyCode.RightShift, false, game)
end)

UITextSizeConstraint.Parent = TextButton
UITextSizeConstraint.MaxTextSize = 15
  	end    
})

GxTab:AddButton({
	Name = "GX Speed Adjuster",
	Callback = function()
-- Speed Adjuster Script
local player = game.Players.LocalPlayer
local mouse = player:GetMouse()

-- Create GUI
local speedGui = Instance.new("ScreenGui")
speedGui.Name = "Speed Adjuster"
speedGui.Parent = game.CoreGui

-- Main Tab
local mainTab = Instance.new("Frame")
mainTab.Size = UDim2.new(0, 200, 0, 150)
mainTab.Position = UDim2.new(0, 10, 0, 10)
mainTab.BackgroundColor3 = Color3.new(0.2, 0.2, 0.2)
mainTab.BorderSizePixel = 2
mainTab.Parent = speedGui

-- Make GUI Dragable
local dragging
local dragInput
local dragStart
local startPos

mainTab.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        dragging = true
        dragStart = input.Position
        startPos = mainTab.Position
        input.Changed:Connect(function()
            if input.UserInputState == Enum.UserInputState.End then
                dragging = false
            end
        end)
    end
end)

mainTab.InputChanged:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseMovement then
        dragInput = input
    end
end)

mouse.Move:Connect(function()
    if dragging then
        local delta = dragInput.Position - dragStart
        mainTab.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
    end
end)

-- Speed Adjuster
local speedValue = 16 -- Default speed

local speedSlider = Instance.new("TextLabel")
speedSlider.Size = UDim2.new(0, 200, 0, 30)
speedSlider.Position = UDim2.new(0, 0, 0, 0)
speedSlider.Text = "Speed: " .. speedValue
speedSlider.TextColor3 = Color3.new(1, 1, 1)
speedSlider.BackgroundTransparency = 1
speedSlider.Parent = mainTab

local speedInput = Instance.new("TextBox")
speedInput.Size = UDim2.new(0, 50, 0, 20)
speedInput.Position = UDim2.new(0, 10, 0, 40)
speedInput.Text = tostring(speedValue)
speedInput.TextColor3 = Color3.new(1, 1, 1)
speedInput.BackgroundColor3 = Color3.new(0.3, 0.3, 0.3)
speedInput.Parent = mainTab

local applyButton = Instance.new("TextButton")
applyButton.Size = UDim2.new(0, 80, 0, 30)
applyButton.Position = UDim2.new(0, 10, 0, 70)
applyButton.Text = "Apply"
applyButton.TextColor3 = Color3.new(1, 1, 1)
applyButton.BackgroundColor3 = Color3.new(0.4, 0.4, 0.4)
applyButton.Parent = mainTab

applyButton.MouseButton1Click:Connect(function()
    speedValue = tonumber(speedInput.Text) or speedValue
    speedSlider.Text = "Speed: " .. speedValue
    -- Adjust player speed using the speedValue
    player.Character.Humanoid.WalkSpeed = speedValue
end)

-- Close Button
local closeButton = Instance.new("TextButton")
closeButton.Size = UDim2.new(0, 20, 0, 20)
closeButton.Position = UDim2.new(1, -20, 0, 0)
closeButton.Text = "X"
closeButton.TextColor3 = Color3.new(1, 0, 0)
closeButton.BackgroundColor3 = Color3.new(0.2, 0.2, 0.2)
closeButton.Parent = mainTab

closeButton.MouseButton1Click:Connect(function()
    speedGui:Destroy()
end)

-- Additional Text
local additionalText = Instance.new("TextLabel")
additionalText.Size = UDim2.new(0, 200, 0, 20)
additionalText.Position = UDim2.new(0, 0, 0, 120)
additionalText.Text = "GXTEAM"
additionalText.TextColor3 = Color3.new(1, 1, 1)
additionalText.BackgroundTransparency = 1
additionalText.Parent = mainTab
  	end    
})

GxTab:AddButton({
	Name = "GX Jump Adjuster",
	Callback = function()
-- Jump Adjuster Script
local player = game.Players.LocalPlayer
local mouse = player:GetMouse()

-- Create GUI
local jumpGui = Instance.new("ScreenGui")
jumpGui.Name = "Jump Adjuster"
jumpGui.Parent = game.CoreGui

-- Main Tab
local mainTab = Instance.new("Frame")
mainTab.Size = UDim2.new(0, 200, 0, 150)
mainTab.Position = UDim2.new(1, -210, 0, 10)  -- Updated X position
mainTab.BackgroundColor3 = Color3.new(0.2, 0.2, 0.2)
mainTab.BorderSizePixel = 2
mainTab.Parent = jumpGui

-- Make GUI Dragable
local dragging
local dragInput
local dragStart
local startPos

mainTab.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        dragging = true
        dragStart = input.Position
        startPos = mainTab.Position
        input.Changed:Connect(function()
            if input.UserInputState == Enum.UserInputState.End then
                dragging = false
            end
        end)
    end
end)

mainTab.InputChanged:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseMovement then
        dragInput = input
    end
end)

mouse.Move:Connect(function()
    if dragging then
        local delta = dragInput.Position - dragStart
        mainTab.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
    end
end)

-- Jump Adjuster
local jumpPowerValue = 50  -- Default jump power

local jumpSlider = Instance.new("TextLabel")
jumpSlider.Size = UDim2.new(0, 200, 0, 30)
jumpSlider.Position = UDim2.new(0, 0, 0, 0)
jumpSlider.Text = "Jump Power: " .. jumpPowerValue
jumpSlider.TextColor3 = Color3.new(1, 1, 1)
jumpSlider.BackgroundTransparency = 1
jumpSlider.Parent = mainTab

local jumpInput = Instance.new("TextBox")
jumpInput.Size = UDim2.new(0, 50, 0, 20)
jumpInput.Position = UDim2.new(0, 10, 0, 40)
jumpInput.Text = tostring(jumpPowerValue)
jumpInput.TextColor3 = Color3.new(1, 1, 1)
jumpInput.BackgroundColor3 = Color3.new(0.3, 0.3, 0.3)
jumpInput.Parent = mainTab

local applyButton = Instance.new("TextButton")
applyButton.Size = UDim2.new(0, 80, 0, 30)
applyButton.Position = UDim2.new(0, 10, 0, 70)
applyButton.Text = "Apply"
applyButton.TextColor3 = Color3.new(1, 1, 1)
applyButton.BackgroundColor3 = Color3.new(0.4, 0.4, 0.4)
applyButton.Parent = mainTab

applyButton.MouseButton1Click:Connect(function()
    jumpPowerValue = tonumber(jumpInput.Text) or jumpPowerValue
    jumpSlider.Text = "Jump Power: " .. jumpPowerValue

    -- Adjust player jump power using Humanoid property
    local humanoid = player.Character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        humanoid.JumpPower = jumpPowerValue
    end
end)

-- Close Button
local closeButton = Instance.new("TextButton")
closeButton.Size = UDim2.new(0, 20, 0, 20)
closeButton.Position = UDim2.new(1, -20, 0, 0)
closeButton.Text = "X"
closeButton.TextColor3 = Color3.new(1, 0, 0)
closeButton.BackgroundColor3 = Color3.new(0.2, 0.2, 0.2)
closeButton.Parent = mainTab

closeButton.MouseButton1Click:Connect(function()
    jumpGui:Destroy()
end)

-- Additional Text
local additionalText = Instance.new("TextLabel")
additionalText.Size = UDim2.new(0, 200, 0, 20)
additionalText.Position = UDim2.new(0, 0, 0, 120)
additionalText.Text = "GXTEAM"
additionalText.TextColor3 = Color3.new(1, 1, 1)
additionalText.BackgroundTransparency = 1
additionalText.Parent = mainTab
  	end    
})

GxTab:AddButton({
	Name = "Destroy GX",
	Callback = function()
OrionLib:Destroy()
  	end    
})

UniversalTab:AddButton({
	Name = "Infinite Yield",
	Callback = function()
loadstring(game:HttpGet('https://raw.githubusercontent.com/EdgeIY/infiniteyield/master/source'))()
  	end    
})

UniversalTab:AddButton({
	Name = "Fly Gui V3",
	Callback = function()
loadstring(game:HttpGet('https://pastebin.com/raw/YSL3xKYU'))()
  	end    
})

UniversalTab:AddButton({
	Name = "Fly GUI V3 (Secured)",
	Callback = function()
loadstring(game:HttpGet('https://raw.githubusercontent.com/Pro69Yes/sussy-Script/main/SecuredFlyGuiv3.lua'))()
  	end    
})

UniversalTab:AddButton({
	Name = "VFly Gui",
	Callback = function()
loadstring(game:HttpGet("https://pastebin.com/raw/MHE1cbWF"))()
  	end    
})

UniversalTab:AddButton({
	Name = "FE Animation R15",
	Callback = function()
loadstring(game:HttpGet("https://raw.githubusercontent.com/GamingScripter/Animation-Hub/main/Animation%20Gui", true))()
  	end    
})

UniversalTab:AddButton({
	Name = "FE Emotes R15",
	Callback = function()
loadstring(game:HttpGet("https://pastebin.com/raw/eCpipCTH"))()
  	end    
})

TrollsTab:AddButton({
	Name = "InvisMobile R15/R6",
	Callback = function()
loadstring(game:HttpGet('https://raw.githubusercontent.com/LiverMods/raw/main/Invisible'))()
  	end    
})

UniversalTab:AddButton({
	Name = "Item Tools",
	Callback = function()
loadstring(game:HttpGet(('https://pastefy.app/VYIAk3o1/raw'),true))()
  	end    
})

UniversalTab:AddButton({
	Name = "BTR Better Roblox V2",
	Callback = function()
loadstring(game:HttpGet("https://eternityhub.xyz/BetterRoblox/Loader"))()
  	end    
})

UniversalTab:AddButton({
	Name = "Permanent TPTOOL",
	Callback = function()
loadstring(game:HttpGet("https://pastefy.app/IpjIW7ZH/raw"))()
  	end    
})

UniversalTab:AddButton({
	Name = "SimpleCMDS",
	Callback = function()
loadstring(game:HttpGet('https://pastebin.com/raw/3hDQcTaD'))()
  	end    
})

UniversalTab:AddButton({
	Name = "Server Finder OP",
	Callback = function()
loadstring(game:HttpGet("https://www.scriptblox.com/raw/Server-Browser_80", true))();
  	end    
})

UniversalTab:AddButton({
	Name = "Anti Fling",
	Callback = function()
loadstring(game:HttpGet(('https://pastebin.com/raw/GxdesRQx'),true))()
  	end    
})

UniversalTab:AddButton({
	Name = "FPS BOOST",
	Callback = function()
loadstring(game:HttpGet(('https://pastebin.com/raw/rNawQPNh'),true))()
  	end    
})

GamesTab:AddButton({
	Name = "Shympony Hub",
	Callback = function()
local a,b,c,d=loadstring,request or http_request or (http and http.request) or (syn and syn.request),assert,"https://itsjidy.github.io/SymphonyHub/Loader.html"c(a and b, "Your Executor does not support.")a(b({Url=d,Method="GET"}).Body)()
  	end    
})

GamesTab:AddButton({
	Name = "Ice Hub",
	Callback = function()
loadstring(game:HttpGet("https://raw.githubusercontent.com/IceMael7/NewIceHub/main/Brookhaven"))()
  	end    
})

GamesTab:AddButton({
	Name = "Funky Friday AutoPlayer",
	Callback = function()
loadstring(game:HttpGet("https://raw.githubusercontent.com/ShowerHead-FluxTeam/scripts/main/funky-friday-autoplay"))()
  	end    
})

GamesTab:AddButton({
	Name = "OP Funky Friday Unlimited Score GUI",
	Callback = function()
loadstring(game:HttpGet("https://raw.githubusercontent.com/BalligusapoTT/BalligusapoTT/main/Nokey"))()
  	end    
})

GamesTab:AddButton({
	Name = "FFAP Gui Remover (Mobile)",
	Callback = function()
getgenv().keytoclick = "Delete"
tool = Instance.new("Tool")
tool.RequiresHandle = false
tool.Name = keytoclick
tool.Activated:connect(function()
    local vim = game:service("VirtualInputManager")
vim:SendKeyEvent(true, keytoclick, false, game)
end)
tool.Parent = game.Players.LocalPlayer.Backpack
wait(0.2)
local AkaliNotif = loadstring(game:HttpGet("https://raw.githubusercontent.com/Kinlei/Dynissimo/main/Scripts/AkaliNotif.lua"))();
local Notify = AkaliNotif.Notify;
Notify({
Description = "credits to matt";
Title = "FF Autoplay Remover";
Duration = 10;
});
  	end    
})

GamesTab:AddButton({
	Name = "Funky Friday AP FIXED MOBILE/PC",
	Callback = function()
loadstring(game:HttpGet("https://raw.githubusercontent.com/Nadir3709/RandomScript/main/FunkyFridayMobile"))()
  	end    
})

GamesTab:AddButton({
	Name = "Funky Friday AutoPlayer V2 [buggy]",
	Callback = function()
print("Credits to mstudio45 for the ported UI lib of Linoria")
print("Credits to Wally-RBLX and his devs for making this amazing script")
print("I DO NOT OWN ANY OF THIS CODE. CREDITS TO THIS CODE AND UI LIBS ETC GO TO THEIR OWNERS.")
print(" ")
print("Wally RBLX's Funky Friday AutoPlay script mobile port. (READ LINES ABOVE!)")

local start = tick()
local client = game:GetService('Players').LocalPlayer;
local set_identity = (type(syn) == 'table' and syn.set_thread_identity) or setidentity or setthreadcontext
local executor = identifyexecutor and identifyexecutor() or 'Unknown'

local function fail(r) return client:Kick(r) end

-- gracefully handle errors when loading external scripts
-- added a cache to make hot reloading a bit faster
local usedCache = shared.__urlcache and next(shared.__urlcache) ~= nil

shared.__urlcache = shared.__urlcache or {}
local function urlLoad(url)
    local success, result

    if shared.__urlcache[url] then
        success, result = true, shared.__urlcache[url]
    else
        success, result = pcall(game.HttpGet, game, url)
    end

    if (not success) then
        return fail(string.format('Failed to GET url %q for reason: %q', url, tostring(result)))
    end

    local fn, err = loadstring(result)
    if (type(fn) ~= 'function') then
        return fail(string.format('Failed to loadstring url %q for reason: %q', url, tostring(err)))
    end

    local results = { pcall(fn) }
    if (not results[1]) then
        return fail(string.format('Failed to initialize url %q for reason: %q', url, tostring(results[2])))
    end

    shared.__urlcache[url] = result
    return unpack(results, 2)
end

-- attempt to block imcompatible exploits
-- rewrote because old checks literally did not work
if type(set_identity) ~= 'function' then return fail('Unsupported exploit (missing "set_thread_identity")') end
if type(getconnections) ~= 'function' then return fail('Unsupported exploit (missing "getconnections")') end
if type(getloadedmodules) ~= 'function' then return fail('Unsupported exploit (misssing "getloadedmodules")') end
if type(getgc) ~= 'function' then   return fail('Unsupported exploit (misssing "getgc")') end

local getinfo = debug.getinfo or getinfo;
local getupvalue = debug.getupvalue or getupvalue;
local getupvalues = debug.getupvalues or getupvalues;
local setupvalue = debug.setupvalue or setupvalue;

if type(setupvalue) ~= 'function' then return fail('Unsupported exploit (misssing "debug.setupvalue")') end
if type(getupvalue) ~= 'function' then return fail('Unsupported exploit (misssing "debug.getupvalue")') end
if type(getupvalues) ~= 'function' then return fail('Unsupported exploit (missing "debug.getupvalues")') end

-- free exploit bandaid fix
if type(getinfo) ~= 'function' then
    local debug_info = debug.info;
    if type(debug_info) ~= 'function' then
        -- if your exploit doesnt have getrenv you have no hope
        if type(getrenv) ~= 'function' then return fail('Unsupported exploit (missing "getrenv")') end
        debug_info = getrenv().debug.info
    end
    getinfo = function(f)
        assert(type(f) == 'function', string.format('Invalid argument #1 to debug.getinfo (expected %s got %s', 'function', type(f)))
        local results = { debug.info(f, 'slnfa') }
        local _, upvalues = pcall(getupvalues, f)
        if type(upvalues) ~= 'table' then
            upvalues = {}
        end
        local nups = 0
        for k in next, upvalues do
            nups = nups + 1
        end
        -- winning code
        return {
            source      = '@' .. results[1],
            short_src   = results[1],
            what        = results[1] == '[C]' and 'C' or 'Lua',
            currentline = results[2],
            name        = results[3],
            func        = results[4],
            numparams   = results[5],
            is_vararg   = results[6], -- 'a' argument returns 2 values :)
            nups        = nups,     
        }
    end
end

local IsMobile = false;
local DevicePlatform = Enum.Platform.None;
pcall(function() DevicePlatform = UserInputService:GetPlatform(); end);
IsMobile = (DevicePlatform == Enum.Platform.Android or DevicePlatform == Enum.Platform.IOS);
local UIRepo = 'https://raw.githubusercontent.com/Bart3kk/LinLib/main/'
local ScriptRepo = 'https://raw.githubusercontent.com/Bart3kk/funky-friday-autoplay/main/'

local UI = nil
if IsMobile then
    UI = loadstring(game:HttpGet(UIRepo .. 'TestMobileSupport.lua'))()
else
    UI = loadstring(game:HttpGet(UIRepo .. 'Library.lua'))()
end

local metadata = loadstring(game:HttpGet(ScriptRepo .. 'metadata.lua'))()
local httpService = game:GetService('HttpService')

local framework, scrollHandler, network
local counter = 0

while true do
    for _, obj in next, getgc(true) do
        if type(obj) == 'table' then 
            if rawget(obj, 'GameUI') then
                framework = obj;
            elseif type(rawget(obj, 'Server')) == 'table' then
                network = obj;     
            end
        end

        if network and framework then break end
    end

    for _, module in next, getloadedmodules() do
        if module.Name == 'ScrollHandler' then
            scrollHandler = module;
            break;
        end
    end 

    if (type(framework) == 'table' and typeof(scrollHandler) == 'Instance' and type(network) == 'table') then
        break
    end

    counter = counter + 1
    if counter > 6 then
        fail(string.format('Failed to load game dependencies. Details: %s, %s, %s', type(framework), typeof(scrollHandler), type(network)))
    end
    wait(1)
end

local runService = game:GetService('RunService')
local userInputService = game:GetService('UserInputService')
local virtualInputManager = game:GetService('VirtualInputManager')

local random = Random.new()

local task = task or getrenv().task;
local fastWait, fastSpawn = task.wait, task.spawn;

-- firesignal implementation
-- hitchance rolling
local fireSignal, rollChance do
    -- updated for script-ware or whatever
    -- attempted to update for krnl

    function fireSignal(target, signal, ...)
        -- getconnections with InputBegan / InputEnded does not work without setting Synapse to the game's context level
        set_identity(2)
        local didFire = false
        for _, signal in next, getconnections(signal) do
            if type(signal.Function) == 'function' and islclosure(signal.Function) then
                local scr = rawget(getfenv(signal.Function), 'script')
                if scr == target then
                    didFire = true
                    pcall(signal.Function, ...)
                end
            end
        end
        -- if not didFire then fail"couldnt fire input signal" end
        set_identity(7)
    end

    -- uses a weighted random system
    -- its a bit scuffed rn but it works good enough

    function rollChance()
        -- if (//library.flags.autoPlayerMode == 'Manual') then
        if Options.AutoplayerMode.Value == 'Manual' then
            if (Options.SickBind:GetState()) then return 'Sick' end
            if (Options.GoodBind:GetState()) then return 'Good' end
            if (Options.OkayBind:GetState()) then return 'Ok' end
            if (Options.BadBind:GetState()) then return 'Bad' end

            return 'Bad' -- incase if it cant find one
        end

        local chances = {
            { 'Sick', Options.SickChance.Value },
            { 'Good', Options.GoodChance.Value },
            { 'Ok', Options.OkChance.Value },
            { 'Bad', Options.BadChance.Value },
            { 'Miss' , Options.MissChance.Value },
        }

        table.sort(chances, function(a, b)
            return a[2] > b[2]
        end)

        local sum = 0;
        for i = 1, #chances do
            sum += chances[i][2]
        end

        if sum == 0 then
            return chances[random:NextInteger(1, #chances)][1]
        end

        local initialWeight = random:NextInteger(0, sum)
        local weight = 0;

        for i = 1, #chances do
            weight = weight + chances[i][2]

            if weight > initialWeight then
                return chances[i][1]
            end
        end

        return 'Sick'
    end
end

-- autoplayer
local chanceValues do
    chanceValues = { 
        Sick = 96,
        Good = 92,
        Ok = 87,
        Bad = 75,
    }

    local keyCodeMap = {}
    for _, enum in next, Enum.KeyCode:GetEnumItems() do
        keyCodeMap[enum.Value] = enum
    end

    if shared._unload then
        pcall(shared._unload)
    end

    function shared._unload()
        if shared._id then
            pcall(runService.UnbindFromRenderStep, runService, shared._id)
        end

        UI:Unload()

        for i = 1, #shared.threads do
            coroutine.close(shared.threads[i])
        end

        for i = 1, #shared.callbacks do
            task.spawn(shared.callbacks[i])
        end
    end

    shared.threads = {}
    shared.callbacks = {}

    shared._id = httpService:GenerateGUID(false)

    local function pressKey(keyCode, state)
        if Options.PressMode.Value == 'virtual input' then
            virtualInputManager:SendKeyEvent(state, keyCode, false, nil)
        else
            fireSignal(scrollHandler, userInputService[state and 'InputBegan' or 'InputEnded'], { KeyCode = keyCode, UserInputType = Enum.UserInputType.Keyboard }, false)
        end
    end

    local rng = Random.new()
    runService:BindToRenderStep(shared._id, 1, function()
        --if (not library.flags.autoPlayer) then return end
        
        if (not Toggles.Autoplayer) or (not Toggles.Autoplayer.Value) then 
            return 
        end

        local currentlyPlaying = framework.SongPlayer.CurrentlyPlaying

        if typeof(currentlyPlaying) ~= 'Instance' or not currentlyPlaying:IsA('Sound') then 
            return 
        end

        local arrows = framework.UI:GetNotes()
        local count = framework.SongPlayer:GetKeyCount()
        local mode = count .. 'Key'

        local arrowData = framework.ArrowData[mode].Arrows
        for i, arrow in next, arrows do
            -- todo: switch to this (https://i.imgur.com/pEVe6Tx.png)
            local ignoredNoteTypes = { Death = true, Mechanic = true, Poison = true }

            if type(arrow.NoteDataConfigs) == 'table' then 
                if ignoredNoteTypes[arrow.NoteDataConfigs.Type] then 
                    continue
                end
            end

            if (arrow.Side == framework.UI.CurrentSide) and (not arrow.Marked) and currentlyPlaying.TimePosition > 0 then
                local position = (arrow.Data.Position % count) .. '' 

                local hitboxOffset = 0 
                do
                    local settings = framework.Settings;
                    local offset = type(settings) == 'table' and settings.HitboxOffset;
                    local value = type(offset) == 'table' and offset.Value;

                    if type(value) == 'number' then
                        hitboxOffset = value;
                    end

                    hitboxOffset = hitboxOffset / 1000
                end

                local songTime = framework.SongPlayer.CurrentTime
                local playbackSpeed = 1
                do
                    local configs = framework.SongPlayer.CurrentSongConfigs
                    if type(configs) == 'table' and type(rawget(configs, "PlaybackSpeed")) == "number" then
                        playbackSpeed = configs.PlaybackSpeed
                    end

                    songTime = songTime / playbackSpeed
                end

                local noteTime = math.clamp((1 - math.abs(arrow.Data.Time - (songTime + hitboxOffset))) * 100, 0, 100)

                local result = rollChance()
                arrow._hitChance = arrow._hitChance or result;

                local hitChance = (Options.AutoplayerMode.Value == 'Manual' and result or arrow._hitChance)
                if hitChance ~= "Miss" and noteTime >= chanceValues[arrow._hitChance] then
                    fastSpawn(function()
                        arrow.Marked = true;
                        local keyCode = keyCodeMap[arrowData[position].Keybinds.Keyboard[1]]

                        pressKey(keyCode, true)

                        local arrowLength = arrow.Data.Length or 0
                        local isHeld = arrowLength > 0
                                
                        if isHeld then arrowLength = arrowLength / playbackSpeed end

                        local delayMode = Options.DelayMode.Value

                        local minDelay = isHeld and Options.HeldDelayMin or Options.NoteDelayMin;
                        local maxDelay = isHeld and Options.HeldDelayMax or Options.NoteDelayMax;
                        local noteDelay = isHeld and Options.HeldDelay or Options.ReleaseDelay

                        local delay = delayMode == 'Random' and rng:NextNumber(minDelay.Value, maxDelay.Value) or noteDelay.Value
                        task.wait(arrowLength + (delay / 1000))

                        pressKey(keyCode, false)
                        arrow.Marked = nil;
                    end)
                end
            end
        end
    end)
end

local ActivateUnlockables do
    -- Note: I know you can do this with UserId but it only works if you run it before opening the notes menu
    -- My script should work no matter the order of which you run things :)

    local loadStyle = nil
    local function loadStyleProxy(...)
        -- This forces the styles to reload every time
            
        local upvalues = getupvalues(loadStyle)
        for i, upvalue in next, upvalues do
            if type(upvalue) == 'table' and rawget(upvalue, 'Style') then
                rawset(upvalue, 'Style', nil);
                setupvalue(loadStyle, i, upvalue)
            end
        end

        return loadStyle(...)
    end

    local function applyLoadStyleProxy(...)
        local gc = getgc()
        for i = 1, #gc do
            local obj = gc[i]
            if type(obj) == 'function' then
                -- goodbye nups numeric loop because script-ware is weird
                local upvalues = getupvalues(obj)
                for i, upv in next, upvalues do
                    if type(upv) == 'function' and getinfo(upv).name == 'LoadStyle' then
                        -- ugly but it works, we don't know every name for is_synapse_function and similar
                        local function isGameFunction(fn)
                            return getinfo(fn).source:match('%.ArrowSelector%.Customize$')
                        end

                        if isGameFunction(obj) and isGameFunction(upv) then
                            -- avoid non-game functions :)
                            loadStyle = loadStyle or upv
                            setupvalue(obj, i, loadStyleProxy)

                            table.insert(shared.callbacks, function()
                                assert(pcall(setupvalue, obj, i, loadStyle))
                            end)
                        end
                    end
                end
            end
        end
    end

    local success, error = pcall(applyLoadStyleProxy)
    if not success then
        return fail(string.format('Failed to hook LoadStyle function. Error(%q)\nExecutor(%q)\n', error, executor))
    end

    function ActivateUnlockables()
        local idx = table.find(framework.SongsWhitelist, client.UserId)
        if idx then return end

        UI:Notify('Developer arrows have been unlocked!', 3)
        table.insert(framework.SongsWhitelist, client.UserId)
    end
end

-- UpdateScore hook
do
    while type(roundManager) ~= 'table' do
        task.wait()
        roundManager = network.Server.RoundManager
    end

    local oldUpdateScore = roundManager.UpdateScore;
    function roundManager.UpdateScore(...)
        local args = { ... }
        local score = args[2]

        if type(score) == 'number' and Options.ScoreModifier then
        --    table.foreach(args, warn)
            if Options.ScoreModifier.Value == 'No decrease on miss' then
                args[2] = 0
            elseif Options.ScoreModifier.Value == 'Increase score on miss' then
                args[2] = math.abs(score)
            end
        end

        return oldUpdateScore(unpack(args))
    end

    table.insert(shared.callbacks, function()
        roundManager.UpdateScore = oldUpdateScore
    end)
end

-- Auto ring collector
do
    local thread = task.spawn(function()
        local map = workspace:waitForChild('Map', 5)
        local buildings = map and map:waitForChild('FunctionalBuildings', 5)
        local spawners = buildings and buildings:waitForChild('RingSpawners', 5)

        if spawners == nil then return end
        if type(firetouchinterest) ~= 'function' then return end 

        while true do
            task.wait()
            if Toggles.AutoClaimRings and Toggles.AutoClaimRings.Value then
                local character = client.Character
                local rootPart = character and character:findFirstChild('HumanoidRootPart')

                if rootPart == nil then continue end

                for i, spawner in next, spawners:GetChildren() do
                    for _, ring in next, spawner:GetChildren() do
                        if ring.Name ~= 'GoldenRing' then continue end

                        local ring = ring:findFirstChild('ring')
                        if not (ring and ring:IsA('BasePart')) then continue end
                        if ring.Transparency == 1 then continue end

                        firetouchinterest(ring, rootPart, 0)
                        firetouchinterest(ring, rootPart, 1)
                    end
                end
            end
        end
    end)
    table.insert(shared.callbacks, function()
        pcall(task.cancel, thread)
    end)
end

local SaveManager = {} do
    SaveManager.Ignore = {}
    SaveManager.Parser = {
        Toggle = {
            Save = function(idx, object) 
                return { type = 'Toggle', idx = idx, value = object.Value } 
            end,
            Load = function(idx, data)
                if Toggles[idx] then 
                    Toggles[idx]:SetValue(data.value)
                end
            end,
        },
        Slider = {
            Save = function(idx, object)
                return { type = 'Slider', idx = idx, value = tostring(object.Value) }
            end,
            Load = function(idx, data)
                if Options[idx] then 
                    Options[idx]:SetValue(data.value)
                end
            end,
        },
        Dropdown = {
            Save = function(idx, object)
                return { type = 'Dropdown', idx = idx, value = object.Value, mutli = object.Multi }
            end,
            Load = function(idx, data)
                if Options[idx] then 
                    Options[idx]:SetValue(data.value)
                end
            end,
        },
        ColorPicker = {
            Save = function(idx, object)
                return { type = 'ColorPicker', idx = idx, value = object.Value:ToHex() }
            end,
            Load = function(idx, data)
                if Options[idx] then 
                    Options[idx]:SetValueRGB(Color3.fromHex(data.value))
                end
            end,
        },
        KeyPicker = {
            Save = function(idx, object)
                return { type = 'KeyPicker', idx = idx, mode = object.Mode, key = object.Value }
            end,
            Load = function(idx, data)
                if Options[idx] then 
                    Options[idx]:SetValue({ data.key, data.mode })
                end
            end,
        }
    }

    function SaveManager:Save(name)
        local fullPath = 'funky_friday_autoplayer/configs/' .. name .. '.json'

        local data = {
            version = 2,
            objects = {}
        }

        for idx, toggle in next, Toggles do
            if self.Ignore[idx] then continue end
            table.insert(data.objects, self.Parser[toggle.Type].Save(idx, toggle))
        end

        for idx, option in next, Options do
            if not self.Parser[option.Type] then continue end
            if self.Ignore[idx] then continue end

            table.insert(data.objects, self.Parser[option.Type].Save(idx, option))
        end 

        local success, encoded = pcall(httpService.JSONEncode, httpService, data)
        if not success then
            return false, 'failed to encode data'
        end

        writefile(fullPath, encoded)
        return true
    end

    function SaveManager:Load(name)
        local file = 'funky_friday_autoplayer/configs/' .. name .. '.json'
        if not isfile(file) then return false, 'invalid file' end

        local success, decoded = pcall(httpService.JSONDecode, httpService, readfile(file))
        if not success then return false, 'decode error' end
        if decoded.version ~= 2 then return false, 'invalid version' end

        for _, option in next, decoded.objects do
            if self.Parser[option.type] then
                self.Parser[option.type].Load(option.idx, option)
            end
        end

        return true
    end

    function SaveManager.Refresh()
        local list = listfiles('funky_friday_autoplayer/configs')

        local out = {}
        for i = 1, #list do
            local file = list[i]
            if file:sub(-5) == '.json' then
                -- i hate this but it has to be done ...

                local pos = file:find('.json', 1, true)
                local start = pos

                local char = file:sub(pos, pos)
                while char ~= '/' and char ~= '\\' and char ~= '' do
                    pos = pos - 1
                    char = file:sub(pos, pos)
                end

                if char == '/' or char == '\\' then
                    table.insert(out, file:sub(pos + 1, start - 1))
                end
            end
        end
        
        Options.ConfigList.Values = out;
        Options.ConfigList:SetValues()
        Options.ConfigList:Display()

        return out
    end

    function SaveManager:Delete(name)
        local file = 'funky_friday_autoplayer/configs/' .. name .. '.json'
        if not isfile(file) then return false, string.format('Config %q does not exist', name) end

        local succ, err = pcall(delfile, file)
        if not succ then
            return false, string.format('error occured during file deletion: %s', err)
        end

        return true
    end

    function SaveManager:SetIgnoreIndexes(list)
        for i = 1, #list do 
            table.insert(self.Ignore, list[i])
        end
    end

    function SaveManager.Check()
        local list = listfiles('funky_friday_autoplayer/configs')

        for _, file in next, list do
            if isfolder(file) then continue end

            local data = readfile(file)
            local success, decoded = pcall(httpService.JSONDecode, httpService, data)

            if success and type(decoded) == 'table' and decoded.version ~= 2 then
                pcall(delfile, file)
            end
        end
    end
end

local Window = UI:CreateWindow({
    Title = string.format('funky friday autoplayer - version %s | updated: %s', metadata.version, metadata.updated),
    AutoShow = true,
    
    Center = true,
    Size = UDim2.fromOffset(550, 627),
})

local Tabs = {}
local Groups = {}

Tabs.Main = Window:AddTab('Main')
Tabs.Miscellaneous = Window:AddTab('Miscellaneous')

Groups.Autoplayer = Tabs.Main:AddLeftGroupbox('Autoplayer')
    Groups.Autoplayer:AddToggle('Autoplayer', { Text = 'Autoplayer' }):AddKeyPicker('AutoplayerBind', { Default = 'End', NoUI = true, SyncToggleState = true })
    Groups.Autoplayer:AddDropdown('PressMode', {
        Text = 'Input mode', 
        Compact = true, 
        Default = 'firesignal', 
        Values = { 'firesignal', 'virtual input' }, 
        Tooltip = 'Input method used to press arrows.\n* firesignal: calls input functions directly.\n* virtual input: emulates key presses. use if "firesignal" does not work.', 
    })

Groups.HitChances = Tabs.Main:AddLeftGroupbox('Hit chances')
    Groups.HitChances:AddDropdown('AutoplayerMode', { 
        Text = 'Autoplayer mode', 
        Compact = true, 
        Default = 1, 
        Values = { 'Automatic', 'Manual' },
        Tooltip = 'Mode to use for deciding when to hit notes.\n* Automatic: hits notes based on chance sliders\n* Manual: hits notes based on held keybinds',
    })

    Groups.HitChances:AddSlider('SickChance',   { Text = 'Sick chance', Min = 0, Max = 100, Default = 100, Suffix = '%', Rounding = 0, Compact = true })
    Groups.HitChances:AddSlider('GoodChance',   { Text = 'Good chance', Min = 0, Max = 100, Default = 0, Suffix = '%', Rounding = 0, Compact = true })
    Groups.HitChances:AddSlider('OkChance',     { Text = 'Ok chance',   Min = 0, Max = 100, Default = 0, Suffix = '%', Rounding = 0, Compact = true })
    Groups.HitChances:AddSlider('BadChance',    { Text = 'Bad chance',  Min = 0, Max = 100, Default = 0, Suffix = '%', Rounding = 0, Compact = true })
    Groups.HitChances:AddSlider('MissChance',   { Text = 'Miss chance', Min = 0, Max = 100, Default = 0, Suffix = '%', Rounding = 0, Compact = true })

Groups.HitTiming = Tabs.Main:AddLeftGroupbox('Hit timing')
    Groups.HitTiming:AddDropdown('DelayMode', { 
        Text = 'Delay mode', 
        Default = 1, 
        Values = { 'Manual', 'Random' },
        Tooltip = 'Adjustable timing for when to release notes.\n* Manual releases the note after a fixed amount of time.\n* Random releases the note after a random amount of time.', 
    })

    Groups.HitTiming:AddLabel('Manual delay')
    Groups.HitTiming:AddSlider('ReleaseDelay',   { Text = 'Note delay', Min = 0, Max = 500, Default = 20, Rounding = 0, Compact = true, Suffix = 'ms' })
    Groups.HitTiming:AddSlider('HeldDelay',      { Text = 'Held note delay', Min = -20, Max = 100, Default = 0, Rounding = 0, Compact = true, Suffix = 'ms' })
        
    Groups.HitTiming:AddLabel('Random delay')
    Groups.HitTiming:AddSlider('NoteDelayMin',   { Text = 'Min note delay', Min = 0, Max = 100, Default = 0,    Rounding = 0, Compact = true, Suffix = 'ms' })
    Groups.HitTiming:AddSlider('NoteDelayMax',   { Text = 'Max note delay', Min = 0, Max = 500, Default = 20,   Rounding = 0, Compact = true, Suffix = 'ms' })
    
    Groups.HitTiming:AddSlider('HeldDelayMin',   { Text = 'Min held note delay', Min = 0, Max = 100, Default = 0,   Rounding = 0, Compact = true, Suffix = 'ms' })
    Groups.HitTiming:AddSlider('HeldDelayMax',   { Text = 'Max held note delay', Min = 0, Max = 500, Default = 20,  Rounding = 0, Compact = true, Suffix = 'ms' })

Groups.Misc = Tabs.Main:AddRightGroupbox('Misc')
    Groups.Misc:AddButton('Unlock developer notes', ActivateUnlockables)
    Groups.Misc:AddToggle('AutoClaimRings', { Text = 'Auto claim rings' })

Groups.Keybinds = Tabs.Main:AddRightGroupbox('Keybinds')
    Groups.Keybinds:AddLabel('Sick'):AddKeyPicker('SickBind', { Default = 'One', NoUI = true })
    Groups.Keybinds:AddLabel('Good'):AddKeyPicker('GoodBind', { Default = 'Two', NoUI = true })
    Groups.Keybinds:AddLabel('Ok'):AddKeyPicker('OkayBind', { Default = 'Three', NoUI = true })
    Groups.Keybinds:AddLabel('Bad'):AddKeyPicker('BadBind', { Default = 'Four', NoUI = true })

Groups.Configs = Tabs.Miscellaneous:AddRightGroupbox('Configs')
Groups.Credits = Tabs.Miscellaneous:AddRightGroupbox('Credits')
    local function addRichText(label)
        label.TextLabel.RichText = true
    end

    addRichText(Groups.Credits:AddLabel('<font color="#3da5ff">wally</font> - script'))
    addRichText(Groups.Credits:AddLabel('<font color="#de6cff">Sezei</font> - contributor'))
    Groups.Credits:AddLabel('Inori - ui library')
    Groups.Credits:AddLabel('Jan - old ui library')


Groups.Misc = Tabs.Miscellaneous:AddRightGroupbox('Miscellaneous')
    Groups.Misc:AddLabel(metadata.message or 'no message found!', true)

    Groups.Misc:AddDivider()
    Groups.Misc:AddButton('Unload script', function() pcall(shared._unload) end)
    Groups.Misc:AddButton('Copy discord', function()
        if pcall(setclipboard, "https://wally.cool/discord") then
            UI:Notify('Successfully copied discord link to your clipboard!', 5)
        end
    end)

    Groups.Misc:AddLabel('Menu toggle'):AddKeyPicker('MenuToggle', { Default = 'Delete', NoUI = true })

    UI.ToggleKeybind = Options.MenuToggle

if type(readfile) == 'function' and type(writefile) == 'function' and type(makefolder) == 'function' and type(isfolder) == 'function' then
    makefolder('funky_friday_autoplayer')
    makefolder('funky_friday_autoplayer\\configs')

    Groups.Configs:AddDropdown('ConfigList', { Text = 'Config list', Values = {}, AllowNull = true })
    Groups.Configs:AddInput('ConfigName',    { Text = 'Config name' })

    Groups.Configs:AddDivider()

    Groups.Configs:AddButton('Save config', function()
        local name = Options.ConfigName.Value;
        if name:gsub(' ', '') == '' then
            return UI:Notify('Invalid config name.', 3)
        end

        local success, err = SaveManager:Save(name)
        if not success then
            return UI:Notify(tostring(err), 5)
        end

        UI:Notify(string.format('Saved config %q', name), 5)
        task.defer(SaveManager.Refresh)
    end)

    Groups.Configs:AddButton('Load', function()
        local name = Options.ConfigList.Value
        local success, err = SaveManager:Load(name)
        if not success then
            return UI:Notify(tostring(err), 5)
        end

        UI:Notify(string.format('Loaded config %q', name), 5)
    end):AddButton('Delete', function()
        local name = Options.ConfigList.Value
        if name:gsub(' ', '') == '' then
            return UI:Notify('Invalid config name.', 3)
        end

        local success, err = SaveManager:Delete(name)
        if not success then
            return UI:Notify(tostring(err), 5)
        end

        UI:Notify(string.format('Deleted config %q', name), 5)

        task.spawn(Options.ConfigList.SetValue, Options.ConfigList, nil)
        task.defer(SaveManager.Refresh)
    end)

    Groups.Configs:AddButton('Refresh list', SaveManager.Refresh)

    task.defer(SaveManager.Refresh)
    task.defer(SaveManager.Check)
else
    Groups.Configs:AddLabel('Your exploit is missing file functions so you are unable to use configs.', true)
    --UI:Notify('Failed to create configs tab due to your exploit missing certain file functions.', 2)
end

-- Themes
do
    local latestThemeIndex = 0
    for i, theme in next, themeManager.BuiltInThemes do
        if theme[1] > latestThemeIndex then
            latestThemeIndex = theme[1]
        end
    end

    latestThemeIndex = latestThemeIndex + 1

    local linoriaTheme = themeManager.BuiltInThemes.Default[2]
    local funkyFridayTheme = table.clone(themeManager.BuiltInThemes.Default[2])

    funkyFridayTheme.AccentColor = Color3.fromRGB(255, 65, 65):ToHex()

    themeManager.BuiltInThemes['Linoria'] = { latestThemeIndex, linoriaTheme }
    themeManager.BuiltInThemes['Default'] = { 1, funkyFridayTheme }

    themeManager:SetLibrary(UI)
    themeManager:SetFolder('funky_friday_autoplayer')
    themeManager:ApplyToGroupbox(Tabs.Miscellaneous:AddLeftGroupbox('Themes'))

    SaveManager:SetIgnoreIndexes({ 
        "BackgroundColor", "MainColor", "AccentColor", "OutlineColor", "FontColor", -- themes
        "ThemeManager_ThemeList", 'ThemeManager_CustomThemeList', 'ThemeManager_CustomThemeName', -- themes
    })
end

UI:Notify(string.format('Loaded script in %.4f second(s)!', tick() - start), 3)
  	end    
})

GamesTab:AddButton({
	Name = "BP Script",
	Callback = function()
loadstring(game:HttpGet("https://raw.githubusercontent.com/H4R7NHacks/Obfuscated/master/Breaking%20Point%20H4R7N%20Hack%20v1.2.lua"))()
  	end    
})

GamesTab:AddButton({
	Name = "Rainbow Friends 2",
	Callback = function()
loadstring(game:HttpGet('https://raw.githubusercontent.com/ToraIsMe/ToraIsMe/main/0rainbow'))()
  	end    
})

GamesTab:AddButton({
	Name = "CRIR Script",
	Callback = function()
loadstring(game:HttpGet("https://scriptblox.com/raw/Cart-Ride-Into-Rdite!-Cart-Ride-Trolling-GUI-1498", true))()
  	end    
})

GamesTab:AddButton({
	Name = "PrisonWare",
	Callback = function()
loadstring(game:HttpGet("https://raw.githubusercontent.com/Denverrz/scripts/master/PRISONWARE_v1.3.txt"))()
  	end    
})

GamesTab:AddButton({
	Name = "OP Prison Life",
	Callback = function()
loadstring(game:HttpGet("https://pastebin.com/raw/AZVi2tuK"))()
  	end    
})

GamesTab:AddButton({
	Name = "HawkHub Prison Life: hawkhubneverdies",
	Callback = function()
loadstring(game:HttpGet("https://raw.githubusercontent.com/TheHanki/Hawk/main/Loader", true))()
  	end    
})

GamesTab:AddButton({
	Name = "Bedwars (Vezt)",
	Callback = function()
loadstring(game:HttpGet("https://raw.githubusercontent.com/VeztWare/Vezt/main/Vezt%20-%20BedWars%20(Private).lua"))()
  	end    
})

GamesTab:AddButton({
	Name = "STK Script",
	Callback = function()
loadstring(game:HttpGet("https://raw.githubusercontent.com/Milan08Studio/ChairWare/main/main.lua"))()
  	end    
})

GamesTab:AddButton({
	Name = "Blade Ball BEDOL HUB",
	Callback = function()
loadstring(game:HttpGet("https://raw.githubusercontent.com/3345-c-a-t-s-u-s/-beta-/main/AutoParry.lua"))()
  	end    
})

GamesTab:AddButton({
	Name = "Blade Ball autoparry yesmeanshhs",
	Callback = function()
loadstring(game:HttpGet("https://raw.githubusercontent.com/yesmeanshhs/my-scripts/main/blade%20ball%20op%20script"))()
  	end    
})

GamesTab:AddButton({
	Name = "Blade Ball HexaGon GUI",
	Callback = function()
loadstring(game:HttpGet('https://raw.githubusercontent.com/turtleontop123/sdsdsdsdsdsd/main/freeHexaGon.lua'))()
  	end    
})

GamesTab:AddButton({
	Name = "Blade Ball Nova X GUI",
	Callback = function()
loadstring(game:HttpGet('https://raw.githubusercontent.com/kierpogihahaxd2/MANUAL/main/Script'))()
  	end    
})

GamesTab:AddButton({
	Name = "Blade Ball Leaf HUB: LEAFHUB0NT0PBRO",
	Callback = function()
loadstring(game:HttpGet('https://raw.githubusercontent.com/Mrpopcatfrombupge/LUAHUB/main/Bladeball'))()
  	end    
})

GamesTab:AddButton({
	Name = "Blade Ball Redz HUB",
	Callback = function()
loadstring(game:HttpGet("https://raw.githubusercontent.com/REDzHUB/BladeBall/main/redz9999"))()
  	end    
})

GamesTab:AddButton({
	Name = "The Strongest Battlegrounds NEX",
	Callback = function()
loadstring(game:HttpGet("https://raw.githubusercontent.com/CopyReal/NexHub/main/NexHubLoader", true))()
  	end    
})

GamesTab:AddButton({
	Name = "Legends of Speed OP YukiTM",
	Callback = function()
loadstring(game:HttpGet(('https://raw.githubusercontent.com/YukiTM/Roblox/main/Legends'),true))()
  	end    
})

GamesTab:AddButton({
	Name = "Legends of Speed OP Uchiha HUB",
	Callback = function()
loadstring(game:HttpGet("https://raw.githubusercontent.com/fareljr1/Hub/main/Loader"))()
  	end    
})

GamesTab:AddButton({
	Name = "Legends of Speed OP Project Omega",
	Callback = function()
loadstring(game:HttpGet("https://raw.githubusercontent.com/TheScriptPirate/ProjectOmega/main/ProjectOmegaLoader.lua"))()
  	end    
})

GamesTab:AddButton({
	Name = "Legends of Speed OP RelzHUB: c6ad8c40c28f2354ba2991fb",
	Callback = function()
-- Theme = ["Red", "Blue", "DarkBlue", "LightGreen", " Green", "Cyan", "Purple"] //Default: LightGreen;
_G.Theme = "Cyan"
loadstring(game:HttpGet("https://raw.githubusercontent.com/farghii/relzhub/main/execute.hack", true))()
  	end    
})

OthersTab:AddButton({
	Name = "FPSPING COUNTER",
	Callback = function()
loadstring(game:HttpGet('https://raw.githubusercontent.com/1201for/littlegui/main/FPS-Counter'))()
  	end    
})

OthersTab:AddButton({
	Name = "Custom Sit Animation R6",
	Callback = function()
loadstring(game:HttpGet(('https://pastefy.app/XKxQtK2K/raw'),true))()
  	end    
})

OthersTab:AddButton({
	Name = "Chillz Grapich Enhancer",
	Callback = function()
loadstring(game:HttpGet("https://raw.githubusercontent.com/AZYsGithub/Chillz-s-scripts/main/enhancer.txt"))()
  	end    
})

OthersTab:AddButton({
	Name = "PShade V5",
	Callback = function()
loadstring(game:HttpGet(('https://pastefy.app/xXkUxA0P/raw'),true))()
  	end    
})

TrollsTab:AddButton({
	Name = "GhostPlayer",
	Callback = function()
loadstring(game:HttpGet('https://raw.githubusercontent.com/GhostPlayer352/Test4/main/GhostHub'))()
  	end    
})

OthersTab:AddButton({
	Name = "Simple Keyboard Mobile",
	Callback = function()
loadstring(game:HttpGet(('https://pastefy.app/Te4dwSw2/raw'),true))()
  	end    
})

OthersTab:AddButton({
	Name = "GOD MODE",
	Callback = function()
loadstring(game:HttpGet("https://raw.githubusercontent.com/zephyr10101/ignore-touchinterests/main/main",true))()
  	end    
})

OthersTab:AddButton({
	Name = "FE Anti Fall",
	Callback = function()
loadstring(game:HttpGet("https://raw.githubusercontent.com/zephyr10101/AntiFall/main/Script"))()
  	end    
})

OthersTab:AddButton({
	Name = "RTBC rainbow text",
	Callback = function()
loadstring(game:HttpGet(('https://pastebin.com/raw/thmHdG3d'),true))()
  	end    
})

OthersTab:AddButton({
	Name = "FE Hchat",
	Callback = function()
loadstring(game:HttpGet(('https://pastebin.com/raw/aAqnAQez'),true))()
  	end    
})

TrollsTab:AddButton({
	Name = "FE BALL R6/R15",
	Callback = function()
loadstring(game:HttpGet("https://pastebin.com/raw/BZr9bGDy", true))()
  	end    
})

TrollsTab:AddButton({
	Name = "FE Fling V3",
	Callback = function()
loadstring(game:HttpGet(('https://raw.githubusercontent.com/0Ben1/fe/main/obf_5wpM7bBcOPspmX7lQ3m75SrYNWqxZ858ai3tJdEAId6jSI05IOUB224FQ0VSAswH.lua.txt'),true))()
  	end    
})

TrollsTab:AddButton({
	Name = "OP FE Invisible Fling",
	Callback = function()
loadstring(game:HttpGet("https://raw.githubusercontent.com/0Ben1/fe./main/Fling%20GUI"))()
  	end    
})

TrollsTab:AddButton({
	Name = "Zombieing Fling",
	Callback = function()
loadstring(game:HttpGet(('https://pastefy.app/w7KnPY70/raw'),true))()
  	end    
})

TrollsTab:AddButton({
	Name = "FE CHAT BREAKER",
	Callback = function()
game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(" ⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻⸻", "All")
  	end    
})

TrollsTab:AddButton({
	Name = "FE Curse Chat 18+",
	Callback = function()
loadstring(game:HttpGet("https://raw.githubusercontent.com/Synergy-Networks/products/main/BetterBypasser/loader.lua",true))()
  	end    
})

TrollsTab:AddButton({
	Name = "FE REWIND R15/R6",
	Callback = function()
loadstring(game:HttpGet("https://pastebin.com/raw/cgWLwdN9", true))()
  	end    
})

TrollsTab:AddButton({
	Name = "FE Lag Switch V2",
	Callback = function()
loadstring(game:HttpGet("https://raw.githubusercontent.com/0Ben1/fe/main/obf_7wPfE71d836IXKFb72ToLBmDlsrvLuwsFeHzhcf4Yct4Jd2BS0Do88c56IBS9vfU.lua"))()
  	end    
})

TrollsTab:AddButton({
	Name = "FE Tool Animator",
	Callback = function()
loadstring(game:HttpGet(('https://pastebin.com/raw/dkufMsdA'),true))()
  	end    
})

TrollsTab:AddButton({
	Name = "FE CHANZO TROLL",
	Callback = function()
loadstring(game:HttpGet(('https://pastebin.com/raw/y94Ejz3B'),true))();
  	end    
})

TrollsTab:AddButton({
	Name = "SUPER OP CHAOS TROLL",
	Callback = function()
loadstring(game:HttpGet("https://pastebin.com/raw/1YQN7Vs2"))()
  	end    
})

TrollsTab:AddButton({
	Name = "FE Climb Wall ",
	Callback = function()
loadstring(game:HttpGet("https://raw.githubusercontent.com/0Ben1/fe/main/obf_E872F3ky4888TSVdj6Adgi1hSLtM038AyxVpTVw07QA3QUDcI3sxmuD869hYR4id.lua.txt"))()
  	end    
})

TrollsTab:AddButton({
	Name = "FE Crawl",
	Callback = function()
loadstring(game:HttpGet('https://raw.githubusercontent.com/0Ben1/fe/main/obf_vZDX8j5ggfAf58QhdJ59BVEmF6nmZgq4Mcjt2l8wn16CiStIW2P6EkNc605qv9K4.lua.txt'))()
  	end    
})

TrollsTab:AddButton({
	Name = "FE PC Invisible",
	Callback = function()
--Settings:
local ScriptStarted = false
local Keybind = "E" --Set to whatever you want, has to be the name of a KeyCode Enum.
local Transparency = true --Will make you slightly transparent when you are invisible. No reason to disable.
local NoClip = false --Will make your fake character no clip.

local Player = game:GetService("Players").LocalPlayer
local RealCharacter = Player.Character or Player.CharacterAdded:Wait()

local IsInvisible = false

RealCharacter.Archivable = true
local FakeCharacter = RealCharacter:Clone()
local Part
Part = Instance.new("Part", workspace)
Part.Anchored = true
Part.Size = Vector3.new(200, 1, 200)
Part.CFrame = CFrame.new(0, -500, 0) --Set this to whatever you want, just far away from the map.
Part.CanCollide = true
FakeCharacter.Parent = workspace
FakeCharacter.HumanoidRootPart.CFrame = Part.CFrame * CFrame.new(0, 5, 0)

for i, v in pairs(RealCharacter:GetChildren()) do
  if v:IsA("LocalScript") then
      local clone = v:Clone()
      clone.Disabled = true
      clone.Parent = FakeCharacter
  end
end
if Transparency then
  for i, v in pairs(FakeCharacter:GetDescendants()) do
      if v:IsA("BasePart") then
          v.Transparency = 0.7
      end
  end
end
local CanInvis = true
function RealCharacterDied()
  CanInvis = false
  RealCharacter:Destroy()
  RealCharacter = Player.Character
  CanInvis = true
  isinvisible = false
  FakeCharacter:Destroy()
  workspace.CurrentCamera.CameraSubject = RealCharacter.Humanoid

  RealCharacter.Archivable = true
  FakeCharacter = RealCharacter:Clone()
  Part:Destroy()
  Part = Instance.new("Part", workspace)
  Part.Anchored = true
  Part.Size = Vector3.new(200, 1, 200)
  Part.CFrame = CFrame.new(9999, 9999, 9999) --Set this to whatever you want, just far away from the map.
  Part.CanCollide = true
  FakeCharacter.Parent = workspace
  FakeCharacter.HumanoidRootPart.CFrame = Part.CFrame * CFrame.new(0, 5, 0)

  for i, v in pairs(RealCharacter:GetChildren()) do
      if v:IsA("LocalScript") then
          local clone = v:Clone()
          clone.Disabled = true
          clone.Parent = FakeCharacter
      end
  end
  if Transparency then
      for i, v in pairs(FakeCharacter:GetDescendants()) do
          if v:IsA("BasePart") then
              v.Transparency = 0.7
          end
      end
  end
 RealCharacter.Humanoid.Died:Connect(function()
 RealCharacter:Destroy()
 FakeCharacter:Destroy()
 end)
 Player.CharacterAppearanceLoaded:Connect(RealCharacterDied)
end
RealCharacter.Humanoid.Died:Connect(function()
 RealCharacter:Destroy()
 FakeCharacter:Destroy()
 end)
Player.CharacterAppearanceLoaded:Connect(RealCharacterDied)
local PseudoAnchor
game:GetService "RunService".RenderStepped:Connect(
  function()
      if PseudoAnchor ~= nil then
          PseudoAnchor.CFrame = Part.CFrame * CFrame.new(0, 5, 0)
      end
       if NoClip then
      FakeCharacter.Humanoid:ChangeState(11)
       end
  end
)

PseudoAnchor = FakeCharacter.HumanoidRootPart
local function Invisible()
  if IsInvisible == false then
      local StoredCF = RealCharacter.HumanoidRootPart.CFrame
      RealCharacter.HumanoidRootPart.CFrame = FakeCharacter.HumanoidRootPart.CFrame
      FakeCharacter.HumanoidRootPart.CFrame = StoredCF
      RealCharacter.Humanoid:UnequipTools()
      Player.Character = FakeCharacter
      workspace.CurrentCamera.CameraSubject = FakeCharacter.Humanoid
      PseudoAnchor = RealCharacter.HumanoidRootPart
      for i, v in pairs(FakeCharacter:GetChildren()) do
          if v:IsA("LocalScript") then
              v.Disabled = false
          end
      end

      IsInvisible = true
  else
      local StoredCF = FakeCharacter.HumanoidRootPart.CFrame
      FakeCharacter.HumanoidRootPart.CFrame = RealCharacter.HumanoidRootPart.CFrame
     
      RealCharacter.HumanoidRootPart.CFrame = StoredCF
     
      FakeCharacter.Humanoid:UnequipTools()
      Player.Character = RealCharacter
      workspace.CurrentCamera.CameraSubject = RealCharacter.Humanoid
      PseudoAnchor = FakeCharacter.HumanoidRootPart
      for i, v in pairs(FakeCharacter:GetChildren()) do
          if v:IsA("LocalScript") then
              v.Disabled = true
          end
      end
      IsInvisible = false
  end
end

game:GetService("UserInputService").InputBegan:Connect(
  function(key, gamep)
      if gamep then
          return
      end
      if key.KeyCode.Name:lower() == Keybind:lower() and CanInvis and RealCharacter and FakeCharacter then
          if RealCharacter:FindFirstChild("HumanoidRootPart") and FakeCharacter:FindFirstChild("HumanoidRootPart") then
              Invisible()
          end
      end
  end
)
local Sound = Instance.new("Sound",game:GetService("SoundService"))
Sound.SoundId = "rbxassetid://232127604"
Sound:Play()
game:GetService("StarterGui"):SetCore("SendNotification",{["Title"] = "Invisible Toggle Loaded",["Text"] = "Press "..Keybind.." to become change visibility.",["Duration"] = 20,["Button1"] = "Okay."})
  	end    
})

ChangelogTab:AddButton({
	Name = "added changelog tab..! ",
	Callback = function()
loadstring(game:HttpGet('https://raw.githubusercontent.com/ant-7802/--/main/straightmilk.lua'))()
  	end    
})

ChangelogTab:AddButton({
	Name = "removed (FE CHATHAX), outdated script",
	Callback = function()
loadstring(game:HttpGet('https://raw.githubusercontent.com/ant-7802/--/main/straightmilk.lua'))()
  	end    
})

ChangelogTab:AddButton({
	Name = "PC/Mobile Support..! ",
	Callback = function()
loadstring(game:HttpGet('https://raw.githubusercontent.com/ant-7802/--/main/straightmilk.lua'))()
  	end    
})

ChangelogTab:AddButton({
	Name = "2.5.2",
	Callback = function()
loadstring(game:HttpGet('https://raw.githubusercontent.com/ant-7802/--/main/straightmilk.lua'))()
  	end    
})

ChangelogTab:AddButton({
	Name = "added (RTBC rainbow chat)",
	Callback = function()
loadstring(game:HttpGet('https://raw.githubusercontent.com/ant-7802/--/main/straightmilk.lua'))()
  	end    
})

ChangelogTab:AddButton({
	Name = "changed (Others) tab to (Scripts)",
	Callback = function()
loadstring(game:HttpGet('https://raw.githubusercontent.com/ant-7802/--/main/straightmilk.lua'))()
  	end    
})

ChangelogTab:AddButton({
	Name = "added (SimpleCMDS) ",
	Callback = function()
loadstring(game:HttpGet('https://raw.githubusercontent.com/ant-7802/--/main/straightmilk.lua'))()
  	end    
})

ChangelogTab:AddButton({
	Name = "updated (FE BALL R6/R15)",
	Callback = function()
loadstring(game:HttpGet('https://raw.githubusercontent.com/ant-7802/--/main/straightmilk.lua'))()
  	end    
})

ChangelogTab:AddButton({
	Name = "added (GOD MODE)",
	Callback = function()
loadstring(game:HttpGet('https://raw.githubusercontent.com/ant-7802/--/main/straightmilk.lua'))()
  	end    
})

ChangelogTab:AddButton({
	Name = "added (FE Hchat)",
	Callback = function()
loadstring(game:HttpGet('https://raw.githubusercontent.com/ant-7802/--/main/straightmilk.lua'))()
  	end    
})

ChangelogTab:AddButton({
	Name = "2.5.3",
	Callback = function()
loadstring(game:HttpGet('https://raw.githubusercontent.com/ant-7802/--/main/straightmilk.lua'))()
  	end    
})

ChangelogTab:AddButton({
	Name = "added GX OPENER FOR MOBILE..!!",
	Callback = function()
loadstring(game:HttpGet('https://raw.githubusercontent.com/ant-7802/--/main/straightmilk.lua'))()
  	end    
})

ChangelogTab:AddButton({
	Name = "2.5.4",
	Callback = function()
loadstring(game:HttpGet('https://raw.githubusercontent.com/ant-7802/--/main/straightmilk.lua'))()
  	end    
})

ChangelogTab:AddButton({
	Name = "added (GX Features) tab ",
	Callback = function()
loadstring(game:HttpGet('https://raw.githubusercontent.com/ant-7802/--/main/straightmilk.lua'))()
  	end    
})

ChangelogTab:AddButton({
	Name = "moved automatic gx opener button to (GX Features) ",
	Callback = function()
loadstring(game:HttpGet('https://raw.githubusercontent.com/ant-7802/--/main/straightmilk.lua'))()
  	end    
})

ChangelogTab:AddButton({
	Name = "DEMO RELEASE!",
	Callback = function()
loadstring(game:HttpGet('https://raw.githubusercontent.com/ant-7802/--/main/straightmilk.lua'))()
  	end    
})

ChangelogTab:AddButton({
	Name = "added Destroy GX",
	Callback = function()
loadstring(game:HttpGet('https://raw.githubusercontent.com/ant-7802/--/main/straightmilk.lua'))()
  	end    
})

ChangelogTab:AddButton({
	Name = "added GX button while executing",
	Callback = function()
loadstring(game:HttpGet('https://raw.githubusercontent.com/ant-7802/--/main/straightmilk.lua'))()
  	end    
})

ChangelogTab:AddButton({
	Name = "added some scripts ",
	Callback = function()
loadstring(game:HttpGet('https://raw.githubusercontent.com/ant-7802/--/main/straightmilk.lua'))()
  	end    
})

ChangelogTab:AddButton({
	Name = "Demo 1.1.0",
	Callback = function()
loadstring(game:HttpGet('https://raw.githubusercontent.com/ant-7802/--/main/straightmilk.lua'))()
  	end    
})

ChangelogTab:AddButton({
	Name = "updated tab icons",
	Callback = function()
loadstring(game:HttpGet('https://raw.githubusercontent.com/ant-7802/--/main/straightmilk.lua'))()
  	end    
})

ChangelogTab:AddButton({
	Name = "added some scripts",
	Callback = function()
loadstring(game:HttpGet('https://raw.githubusercontent.com/ant-7802/--/main/straightmilk.lua'))()
  	end    
})

ChangelogTab:AddButton({
	Name = "Demo 1.1.1",
	Callback = function()
loadstring(game:HttpGet('https://raw.githubusercontent.com/ant-7802/--/main/straightmilk.lua'))()
  	end    
})

ChangelogTab:AddButton({
	Name = "updated GX opener",
	Callback = function()
loadstring(game:HttpGet('https://raw.githubusercontent.com/ant-7802/--/main/straightmilk.lua'))()
  	end    
})

ChangelogTab:AddButton({
	Name = "added GX speed adjuster",
	Callback = function()
loadstring(game:HttpGet('https://raw.githubusercontent.com/ant-7802/--/main/straightmilk.lua'))()
  	end    
})

ChangelogTab:AddButton({
	Name = "added GX jump adjuster",
	Callback = function()
loadstring(game:HttpGet('https://raw.githubusercontent.com/ant-7802/--/main/straightmilk.lua'))()
  	end    
})

ChangelogTab:AddButton({
	Name = "added TOO MANY BLADE BALL GUI",
	Callback = function()
loadstring(game:HttpGet('https://raw.githubusercontent.com/ant-7802/--/main/straightmilk.lua'))()
  	end    
})

ChangelogTab:AddButton({
	Name = "fixed funky friday autoplayer",
	Callback = function()
loadstring(game:HttpGet('https://raw.githubusercontent.com/ant-7802/--/main/straightmilk.lua'))()
  	end    
})

ChangelogTab:AddButton({
	Name = "Final 1.0",
	Callback = function()
loadstring(game:HttpGet('https://raw.githubusercontent.com/ant-7802/--/main/straightmilk.lua'))()
  	end    
})

ChangelogTab:AddButton({
	Name = "updated funky friday autoplayer",
	Callback = function()
loadstring(game:HttpGet('https://raw.githubusercontent.com/ant-7802/--/main/straightmilk.lua'))()
  	end    
})

ChangelogTab:AddButton({
	Name = "added invisible script pc",
	Callback = function()
loadstring(game:HttpGet('https://raw.githubusercontent.com/ant-7802/--/main/straightmilk.lua'))()
  	end    
})

ChangelogTab:AddButton({
	Name = "added TSB script NexHub",
	Callback = function()
loadstring(game:HttpGet('https://raw.githubusercontent.com/ant-7802/--/main/straightmilk.lua'))()
  	end    
})

ChangelogTab:AddButton({
	Name = "Final 1.2",
	Callback = function()
loadstring(game:HttpGet('https://raw.githubusercontent.com/ant-7802/--/main/straightmilk.lua'))()
  	end    
})

ChangelogTab:AddButton({
	Name = "added plenty of LOS script mobile/pc",
	Callback = function()
loadstring(game:HttpGet('https://raw.githubusercontent.com/ant-7802/--/main/straightmilk.lua'))()
  	end    
})

ChangelogTab:AddButton({
	Name = "JUST GX Update",
	Callback = function()
loadstring(game:HttpGet('https://raw.githubusercontent.com/ant-7802/--/main/straightmilk.lua'))()
  	end    
})

ChangelogTab:AddButton({
	Name = "updates or fixes bugs at free day or being requested",
	Callback = function()
loadstring(game:HttpGet('https://raw.githubusercontent.com/ant-7802/--/main/straightmilk.lua'))()
  	end    
})

OrionLib:Init()
